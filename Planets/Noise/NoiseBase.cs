// Copyright (C) 2013, 2014 Alvarez Josué
// Copyright (C) 2003, 2004 Jason Bevins

// This code is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation; either version 2.1 of the License, or (at
// your option) any later version.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
// License (LICENSE.txt) for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this library; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

// Original developer's email : 
// The developer's email is jlbezigvins@gmzigail.com (for great email, take
// off every 'zig'.)

// The developer's email is jUNDERSCOREalvareATetudDOOOTinsa-toulouseDOOOTfr (for valid email, replace 
// capital letters by the corresponding character)

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace SimpleTriangle.Noise
{
    /// <summary>
    /// Classe de base commune à tous les bruits.
    /// </summary>
    public class NoiseBase
    {
        #region Misc
        /// <summary>
        /// Qualité du bruit.
        /// </summary>
        public enum NoiseQuality
        {
            QUALITY_FAST,
            QUALITY_STD,
            QUALITY_BEST,
        }
        #endregion

        #region Variables
        /// <summary>
        /// Représente la fréquence de la première octave.
        /// Plus elle est élevée, plus il y aura de points à interpoler dans un espace donné de flotants.
        /// </summary>
        protected float m_frequency;
        /// <summary>
        /// Représente la lacunarité du bruit.
        /// Plus elle est élevée, plus l'amplitude des octaves successives sera réduite.
        /// </summary>
        protected float m_lacunarity;
        /// <summary>
        /// Représente la qualité du bruit.
        /// </summary>
        protected NoiseQuality m_noiseQuality;
        /// <summary>
        /// Représente le nombre d'octaves du bruit.
        /// </summary>
        protected int m_octaveCount;
        /// <summary>
        /// Représente la graine du bruit.
        /// </summary>
        protected int m_seed;
        /// <summary>
        /// Représente la persistance du bruit.
        /// C'est le coefficient multiplicateur entre chaque octaves 
        /// successives du bruit.
        /// 
        /// Amplitude = persistance * amplitude octave précédente
        /// </summary>
        protected float m_persistence;
        #endregion

        /// <summary>
        /// Obtient ou définit la valeur de persistance du bruit.
        /// </summary>
        public virtual float Persistence
        {
            get { return m_persistence; }
            set { m_persistence = value; }
        }
        /// <summary>
        /// Obtient ou définit la fréquence du bruit.
        /// </summary>
        public virtual float Frequency
        {
            get { return m_frequency; }
            set { m_frequency = value; }
        }

        /// <summary>
        /// Obtient ou définit la lacunarité du bruit.
        /// </summary>
        public virtual float Lacunarity
        {
            get { return m_lacunarity; }
            set { m_lacunarity = value; }
        }

        /// <summary>
        /// Obtient ou définit la qualité du bruit.
        /// </summary>
        public virtual NoiseQuality Quality
        {
            get { return m_noiseQuality; }
            set { m_noiseQuality = value; }
        }

        /// <summary>
        /// Obtient ou définit le nombre d'octaves du bruit.
        /// </summary>
        public virtual int OctaveCount
        {
            get { return m_octaveCount; }
            set { m_octaveCount = value; }
        }

        /// <summary>
        /// Obtient ou définit la graine permettant la génération du bruit.
        /// </summary>
        public virtual int Seed
        {
            get { return m_seed; }
            set { m_seed = value; }
        }

        #region Methods
        #region Random Vectors

        // Source : libnoise.
        // A table of 256 random normalized vectors.  Each row is an (x, y, z, 0)
        // coordinate.  The 0 is used as padding so we can use bit shifts to index
        // any row in the table.  These vectors have an even statistical
        // distribution, which improves the quality of the coherent noise
        // generated by these vectors.  For more information, see "GPU Gems",
        // Chapter 5 - Implementing Improved Perlin Noise by Ken Perlin,
        // specifically page 76.
        public static float[] s_randomVectors = new float[]
        {
            #region RV_Content
    -(float)(float)0.763874, -(float)(float)0.596439, -(float)(float)0.246489, (float)(float)0.0,
    (float)(float)0.396055, (float)(float)0.904518, -(float)(float)0.158073, (float)(float)0.0,
    -(float)(float)0.499004, -(float)(float)0.8665, -(float)(float)0.0131631, (float)(float)0.0,
    (float)(float)0.468724, -(float)(float)0.824756, (float)(float)0.316346, (float)(float)0.0,
    (float)(float)0.829598, (float)(float)0.43195, (float)(float)0.353816, (float)(float)0.0,
    -(float)(float)0.454473, (float)(float)0.629497, -(float)(float)0.630228, (float)(float)0.0,
    -(float)(float)0.162349, -(float)(float)0.869962, -(float)(float)0.465628, (float)(float)0.0,
    (float)(float)0.932805, (float)(float)0.253451, (float)(float)0.256198, (float)(float)0.0,
    -(float)(float)0.345419, (float)(float)0.927299, -(float)(float)0.144227, (float)(float)0.0,
    -(float)(float)0.715026, -(float)(float)0.293698, -(float)(float)0.634413, (float)(float)0.0,
    -(float)(float)0.245997, (float)(float)0.717467, -(float)(float)0.651711, (float)(float)0.0,
    -(float)(float)0.967409, -(float)(float)0.250435, -(float)(float)0.037451, (float)(float)0.0,
    (float)(float)0.901729, (float)(float)0.397108, -(float)(float)0.170852, (float)(float)0.0,
    (float)(float)0.892657, -(float)(float)0.0720622, -(float)(float)0.444938, (float)(float)0.0,
    (float)(float)0.0260084, -(float)(float)0.0361701, (float)(float)0.999007, (float)(float)0.0,
    (float)(float)0.949107, -(float)(float)0.19486, (float)(float)0.247439, (float)(float)0.0,
    (float)(float)0.471803, -(float)(float)0.807064, -(float)(float)0.355036, (float)(float)0.0,
    (float)(float)0.879737, (float)(float)0.141845, (float)(float)0.453809, (float)(float)0.0,
    (float)(float)0.570747, (float)(float)0.696415, (float)(float)0.435033, (float)(float)0.0,
    -(float)(float)0.141751, -(float)(float)0.988233, -(float)(float)0.0574584, (float)(float)0.0,
    -(float)0.58219, -(float)0.0303005, (float)0.812488, (float)0.0,
    -(float)0.60922, (float)0.239482, -(float)0.755975, (float)0.0,
    (float)0.299394, -(float)0.197066, -(float)0.933557, (float)0.0,
    -(float)0.851615, -(float)0.220702, -(float)0.47544, (float)0.0,
    (float)0.848886, (float)0.341829, -(float)0.403169, (float)0.0,
    -(float)0.156129, -(float)0.687241, (float)0.709453, (float)0.0,
    -(float)0.665651, (float)0.626724, (float)0.405124, (float)0.0,
    (float)0.595914, -(float)0.674582, (float)0.43569, (float)0.0,
    (float)0.171025, -(float)0.509292, (float)0.843428, (float)0.0,
    (float)0.78605, (float)0.536414, -(float)0.307222, (float)0.0,
    (float)0.18905, -(float)0.791613, (float)0.581042, (float)0.0,
    -(float)0.294916, (float)0.844994, (float)0.446105, (float)0.0,
    (float)0.342031, -(float)0.58736, -(float)0.7335, (float)0.0,
    (float)0.57155, (float)0.7869, (float)0.232635, (float)0.0,
    (float)0.885026, -(float)0.408223, (float)0.223791, (float)0.0,
    -(float)0.789518, (float)0.571645, (float)0.223347, (float)0.0,
    (float)0.774571, (float)0.31566, (float)0.548087, (float)0.0,
    -(float)0.79695, -(float)0.0433603, -(float)0.602487, (float)0.0,
    -(float)0.142425, -(float)0.473249, -(float)0.869339, (float)0.0,
    -(float)0.0698838, (float)0.170442, (float)0.982886, (float)0.0,
    (float)0.687815, -(float)0.484748, (float)0.540306, (float)0.0,
    (float)0.543703, -(float)0.534446, -(float)0.647112, (float)0.0,
    (float)0.97186, (float)0.184391, -(float)0.146588, (float)0.0,
    (float)0.707084, (float)0.485713, -(float)0.513921, (float)0.0,
    (float)0.942302, (float)0.331945, (float)0.043348, (float)0.0,
    (float)0.499084, (float)0.599922, (float)0.625307, (float)0.0,
    -(float)0.289203, (float)0.211107, (float)0.9337, (float)0.0,
    (float)0.412433, -(float)0.71667, -(float)0.56239, (float)0.0,
    (float)0.87721, -(float)0.082816, (float)0.47291, (float)0.0,
    -(float)0.420685, -(float)0.214278, (float)0.881538, (float)0.0,
    (float)0.752558, -(float)0.0391579, (float)0.657361, (float)0.0,
    (float)0.0765725, -(float)0.996789, (float)0.0234082, (float)0.0,
    -(float)0.544312, -(float)0.309435, -(float)0.779727, (float)0.0,
    -(float)0.455358, -(float)0.415572, (float)0.787368, (float)0.0,
    -(float)0.874586, (float)0.483746, (float)0.0330131, (float)0.0,
    (float)0.245172, -(float)0.0838623, (float)0.965846, (float)0.0,
    (float)0.382293, -(float)0.432813, (float)0.81641, (float)0.0,
    -(float)0.287735, -(float)0.905514, (float)0.311853, (float)0.0,
    -(float)0.667704, (float)0.704955, -(float)0.239186, (float)0.0,
    (float)0.717885, -(float)0.464002, -(float)0.518983, (float)0.0,
    (float)0.976342, -(float)0.214895, (float)0.0240053, (float)0.0,
    -(float)0.0733096, -(float)0.921136, (float)0.382276, (float)0.0,
    -(float)0.986284, (float)0.151224, -(float)0.0661379, (float)0.0,
    -(float)0.899319, -(float)0.429671, (float)0.0812908, (float)0.0,
    (float)0.652102, -(float)0.724625, (float)0.222893, (float)0.0,
    (float)0.203761, (float)0.458023, -(float)0.865272, (float)0.0,
    -(float)0.030396, (float)0.698724, -(float)0.714745, (float)0.0,
    -(float)0.460232, (float)0.839138, (float)0.289887, (float)0.0,
    -(float)0.0898602, (float)0.837894, (float)0.538386, (float)0.0,
    -(float)0.731595, (float)0.0793784, (float)0.677102, (float)0.0,
    -(float)0.447236, -(float)0.788397, (float)0.422386, (float)0.0,
    (float)0.186481, (float)0.645855, -(float)0.740335, (float)0.0,
    -(float)0.259006, (float)0.935463, (float)0.240467, (float)0.0,
    (float)0.445839, (float)0.819655, -(float)0.359712, (float)0.0,
    (float)0.349962, (float)0.755022, -(float)0.554499, (float)0.0,
    -(float)0.997078, -(float)0.0359577, (float)0.0673977, (float)0.0,
    -(float)0.431163, -(float)0.147516, -(float)0.890133, (float)0.0,
    (float)0.299648, -(float)0.63914, (float)0.708316, (float)0.0,
    (float)0.397043, (float)0.566526, -(float)0.722084, (float)0.0,
    -(float)0.502489, (float)0.438308, -(float)0.745246, (float)0.0,
    (float)0.0687235, (float)0.354097, (float)0.93268, (float)0.0,
    -(float)0.0476651, -(float)0.462597, (float)0.885286, (float)0.0,
    -(float)0.221934, (float)0.900739, -(float)0.373383, (float)0.0,
    -(float)0.956107, -(float)0.225676, (float)0.186893, (float)0.0,
    -(float)0.187627, (float)0.391487, -(float)0.900852, (float)0.0,
    -(float)0.224209, -(float)0.315405, (float)0.92209, (float)0.0,
    -(float)0.730807, -(float)0.537068, (float)0.421283, (float)0.0,
    -(float)0.0353135, -(float)0.816748, (float)0.575913, (float)0.0,
    -(float)0.941391, (float)0.176991, -(float)0.287153, (float)0.0,
    -(float)0.154174, (float)0.390458, (float)0.90762, (float)0.0,
    -(float)0.283847, (float)0.533842, (float)0.796519, (float)0.0,
    -(float)0.482737, -(float)0.850448, (float)0.209052, (float)0.0,
    -(float)0.649175, (float)0.477748, (float)0.591886, (float)0.0,
    (float)0.885373, -(float)0.405387, -(float)0.227543, (float)0.0,
    -(float)0.147261, (float)0.181623, -(float)0.972279, (float)0.0,
    (float)0.0959236, -(float)0.115847, -(float)0.988624, (float)0.0,
    -(float)0.89724, -(float)0.191348, (float)0.397928, (float)0.0,
    (float)0.903553, -(float)0.428461, -(float)0.00350461, (float)0.0,
    (float)0.849072, -(float)0.295807, -(float)0.437693, (float)0.0,
    (float)0.65551, (float)0.741754, -(float)0.141804, (float)0.0,
    (float)0.61598, -(float)0.178669, (float)0.767232, (float)0.0,
    (float)0.0112967, (float)0.932256, -(float)0.361623, (float)0.0,
    -(float)0.793031, (float)0.258012, (float)0.551845, (float)0.0,
    (float)0.421933, (float)0.454311, (float)0.784585, (float)0.0,
    -(float)0.319993, (float)0.0401618, -(float)0.946568, (float)0.0,
    -(float)0.81571, (float)0.551307, -(float)0.175151, (float)0.0,
    -(float)0.377644, (float)0.00322313, (float)0.925945, (float)0.0,
    (float)0.129759, -(float)0.666581, -(float)0.734052, (float)0.0,
    (float)0.601901, -(float)0.654237, -(float)0.457919, (float)0.0,
    -(float)0.927463, -(float)0.0343576, -(float)0.372334, (float)0.0,
    -(float)0.438663, -(float)0.868301, -(float)0.231578, (float)0.0,
    -(float)0.648845, -(float)0.749138, -(float)0.133387, (float)0.0,
    (float)0.507393, -(float)0.588294, (float)0.629653, (float)0.0,
    (float)0.726958, (float)0.623665, (float)0.287358, (float)0.0,
    (float)0.411159, (float)0.367614, -(float)0.834151, (float)0.0,
    (float)0.806333, (float)0.585117, -(float)0.0864016, (float)0.0,
    (float)0.263935, -(float)0.880876, (float)0.392932, (float)0.0,
    (float)0.421546, -(float)0.201336, (float)0.884174, (float)0.0,
    -(float)0.683198, -(float)0.569557, -(float)0.456996, (float)0.0,
    -(float)0.117116, -(float)0.0406654, -(float)0.992285, (float)0.0,
    -(float)0.643679, -(float)0.109196, -(float)0.757465, (float)0.0,
    -(float)0.561559, -(float)0.62989, (float)0.536554, (float)0.0,
    (float)0.0628422, (float)0.104677, -(float)0.992519, (float)0.0,
    (float)0.480759, -(float)0.2867, -(float)0.828658, (float)0.0,
    -(float)0.228559, -(float)0.228965, -(float)0.946222, (float)0.0,
    -(float)0.10194, -(float)0.65706, -(float)0.746914, (float)0.0,
    (float)0.0689193, -(float)0.678236, (float)0.731605, (float)0.0,
    (float)0.401019, -(float)0.754026, (float)0.52022, (float)0.0,
    -(float)0.742141, (float)0.547083, -(float)0.387203, (float)0.0,
    -(float)0.00210603, -(float)0.796417, -(float)0.604745, (float)0.0,
    (float)0.296725, -(float)0.409909, -(float)0.862513, (float)0.0,
    -(float)0.260932, -(float)0.798201, (float)0.542945, (float)0.0,
    -(float)0.641628, (float)0.742379, (float)0.192838, (float)0.0,
    -(float)0.186009, -(float)0.101514, (float)0.97729, (float)0.0,
    (float)0.106711, -(float)0.962067, (float)0.251079, (float)0.0,
    -(float)0.743499, (float)0.30988, -(float)0.592607, (float)0.0,
    -(float)0.795853, -(float)0.605066, -(float)0.0226607, (float)0.0,
    -(float)0.828661, -(float)0.419471, -(float)0.370628, (float)0.0,
    (float)0.0847218, -(float)0.489815, -(float)0.8677, (float)0.0,
    -(float)0.381405, (float)0.788019, -(float)0.483276, (float)0.0,
    (float)0.282042, -(float)0.953394, (float)0.107205, (float)0.0,
    (float)0.530774, (float)0.847413, (float)0.0130696, (float)0.0,
    (float)0.0515397, (float)0.922524, (float)0.382484, (float)0.0,
    -(float)0.631467, -(float)0.709046, (float)0.313852, (float)0.0,
    (float)0.688248, (float)0.517273, (float)0.508668, (float)0.0,
    (float)0.646689, -(float)0.333782, -(float)0.685845, (float)0.0,
    -(float)0.932528, -(float)0.247532, -(float)0.262906, (float)0.0,
    (float)0.630609, (float)0.68757, -(float)0.359973, (float)0.0,
    (float)0.577805, -(float)0.394189, (float)0.714673, (float)0.0,
    -(float)0.887833, -(float)0.437301, -(float)0.14325, (float)0.0,
    (float)0.690982, (float)0.174003, (float)0.701617, (float)0.0,
    -(float)0.866701, (float)0.0118182, (float)0.498689, (float)0.0,
    -(float)0.482876, (float)0.727143, (float)0.487949, (float)0.0,
    -(float)0.577567, (float)0.682593, -(float)0.447752, (float)0.0,
    (float)0.373768, (float)0.0982991, (float)0.922299, (float)0.0,
    (float)0.170744, (float)0.964243, -(float)0.202687, (float)0.0,
    (float)0.993654, -(float)0.035791, -(float)0.106632, (float)0.0,
    (float)0.587065, (float)0.4143, -(float)0.695493, (float)0.0,
    -(float)0.396509, (float)0.26509, -(float)0.878924, (float)0.0,
    -(float)0.0866853, (float)0.83553, -(float)0.542563, (float)0.0,
    (float)0.923193, (float)0.133398, -(float)0.360443, (float)0.0,
    (float)0.00379108, -(float)0.258618, (float)0.965972, (float)0.0,
    (float)0.239144, (float)0.245154, -(float)0.939526, (float)0.0,
    (float)0.758731, -(float)0.555871, (float)0.33961, (float)0.0,
    (float)0.295355, (float)0.309513, (float)0.903862, (float)0.0,
    (float)0.0531222, -(float)0.91003, -(float)0.411124, (float)0.0,
    (float)0.270452, (float)0.0229439, -(float)0.96246, (float)0.0,
    (float)0.563634, (float)0.0324352, (float)0.825387, (float)0.0,
    (float)0.156326, (float)0.147392, (float)0.976646, (float)0.0,
    -(float)0.0410141, (float)0.981824, (float)0.185309, (float)0.0,
    -(float)0.385562, -(float)0.576343, -(float)0.720535, (float)0.0,
    (float)0.388281, (float)0.904441, (float)0.176702, (float)0.0,
    (float)0.945561, -(float)0.192859, -(float)0.262146, (float)0.0,
    (float)0.844504, (float)0.520193, (float)0.127325, (float)0.0,
    (float)0.0330893, (float)0.999121, -(float)0.0257505, (float)0.0,
    -(float)0.592616, -(float)0.482475, -(float)0.644999, (float)0.0,
    (float)0.539471, (float)0.631024, -(float)0.557476, (float)0.0,
    (float)0.655851, -(float)0.027319, -(float)0.754396, (float)0.0,
    (float)0.274465, (float)0.887659, (float)0.369772, (float)0.0,
    -(float)0.123419, (float)0.975177, -(float)0.183842, (float)0.0,
    -(float)0.223429, (float)0.708045, (float)0.66989, (float)0.0,
    -(float)0.908654, (float)0.196302, (float)0.368528, (float)0.0,
    -(float)0.95759, -(float)0.00863708, (float)0.288005, (float)0.0,
    (float)0.960535, (float)0.030592, (float)0.276472, (float)0.0,
    -(float)0.413146, (float)0.907537, (float)0.0754161, (float)0.0,
    -(float)0.847992, (float)0.350849, -(float)0.397259, (float)0.0,
    (float)0.614736, (float)0.395841, (float)0.68221, (float)0.0,
    -(float)0.503504, -(float)0.666128, -(float)0.550234, (float)0.0,
    -(float)0.268833, -(float)0.738524, -(float)0.618314, (float)0.0,
    (float)0.792737, -(float)0.60001, -(float)0.107502, (float)0.0,
    -(float)0.637582, (float)0.508144, -(float)0.579032, (float)0.0,
    (float)0.750105, (float)0.282165, -(float)0.598101, (float)0.0,
    -(float)0.351199, -(float)0.392294, -(float)0.850155, (float)0.0,
    (float)0.250126, -(float)0.960993, -(float)0.118025, (float)0.0,
    -(float)0.732341, (float)0.680909, -(float)0.0063274, (float)0.0,
    -(float)0.760674, -(float)0.141009, (float)0.633634, (float)0.0,
    (float)0.222823, -(float)0.304012, (float)0.926243, (float)0.0,
    (float)0.209178, (float)0.505671, (float)0.836984, (float)0.0,
    (float)0.757914, -(float)0.56629, -(float)0.323857, (float)0.0,
    -(float)0.782926, -(float)0.339196, (float)0.52151, (float)0.0,
    -(float)0.462952, (float)0.585565, (float)0.665424, (float)0.0,
    (float)0.61879, (float)0.194119, -(float)0.761194, (float)0.0,
    (float)0.741388, -(float)0.276743, (float)0.611357, (float)0.0,
    (float)0.707571, (float)0.702621, (float)0.0752872, (float)0.0,
    (float)0.156562, (float)0.819977, (float)0.550569, (float)0.0,
    -(float)0.793606, (float)0.440216, (float)0.42, (float)0.0,
    (float)0.234547, (float)0.885309, -(float)0.401517, (float)0.0,
    (float)0.132598, (float)0.80115, -(float)0.58359, (float)0.0,
    -(float)0.377899, -(float)0.639179, (float)0.669808, (float)0.0,
    -(float)0.865993, -(float)0.396465, (float)0.304748, (float)0.0,
    -(float)0.624815, -(float)0.44283, (float)0.643046, (float)0.0,
    -(float)0.485705, (float)0.825614, -(float)0.287146, (float)0.0,
    -(float)0.971788, (float)0.175535, (float)0.157529, (float)0.0,
    -(float)0.456027, (float)0.392629, (float)0.798675, (float)0.0,
    -(float)0.0104443, (float)0.521623, -(float)0.853112, (float)0.0,
    -(float)0.660575, -(float)0.74519, (float)0.091282, (float)0.0,
    -(float)0.0157698, -(float)0.307475, -(float)0.951425, (float)0.0,
    -(float)0.603467, -(float)0.250192, (float)0.757121, (float)0.0,
    (float)0.506876, (float)0.25006, (float)0.824952, (float)0.0,
    (float)0.255404, (float)0.966794, (float)0.00884498, (float)0.0,
    (float)0.466764, -(float)0.874228, -(float)0.133625, (float)0.0,
    (float)0.475077, -(float)0.0682351, -(float)0.877295, (float)0.0,
    -(float)0.224967, -(float)0.938972, -(float)0.260233, (float)0.0,
    -(float)0.377929, -(float)0.814757, -(float)0.439705, (float)0.0,
    -(float)0.305847, (float)0.542333, -(float)0.782517, (float)0.0,
    (float)0.26658, -(float)0.902905, -(float)0.337191, (float)0.0,
    (float)0.0275773, (float)0.322158, -(float)0.946284, (float)0.0,
    (float)0.0185422, (float)0.716349, (float)0.697496, (float)0.0,
    -(float)0.20483, (float)0.978416, (float)0.0273371, (float)0.0,
    -(float)0.898276, (float)0.373969, (float)0.230752, (float)0.0,
    -(float)0.00909378, (float)0.546594, (float)0.837349, (float)0.0,
    (float)0.6602, -(float)0.751089, (float)0.000959236, (float)0.0,
    (float)0.855301, -(float)0.303056, (float)0.420259, (float)0.0,
    (float)0.797138, (float)0.0623013, -(float)0.600574, (float)0.0,
    (float)0.48947, -(float)0.866813, (float)0.0951509, (float)0.0,
    (float)0.251142, (float)0.674531, (float)0.694216, (float)0.0,
    -(float)0.578422, -(float)0.737373, -(float)0.348867, (float)0.0,
    -(float)0.254689, -(float)0.514807, (float)0.818601, (float)0.0,
    (float)0.374972, (float)0.761612, (float)0.528529, (float)0.0,
    (float)0.640303, -(float)0.734271, -(float)0.225517, (float)0.0,
    -(float)0.638076, (float)0.285527, (float)0.715075, (float)0.0,
    (float)0.772956, -(float)0.15984, -(float)0.613995, (float)0.0,
    (float)0.798217, -(float)0.590628, (float)0.118356, (float)0.0,
    -(float)0.986276, -(float)0.0578337, -(float)0.154644, (float)0.0,
    -(float)0.312988, -(float)0.94549, (float)0.0899272, (float)0.0,
    -(float)0.497338, (float)0.178325, (float)0.849032, (float)0.0,
    -(float)0.101136, -(float)0.981014, (float)0.165477, (float)0.0,
    -(float)0.521688, (float)0.0553434, -(float)0.851339, (float)0.0,
    -(float)0.786182, -(float)0.583814, (float)0.202678, (float)0.0,
    -(float)0.565191, (float)0.821858, -(float)0.0714658, (float)0.0,
    (float)0.437895, (float)0.152598, -(float)0.885981, (float)0.0,
    -(float)0.92394, (float)0.353436, -(float)0.14635, (float)0.0,
    (float)0.212189, -(float)0.815162, -(float)0.538969, (float)0.0,
    -(float)0.859262, (float)0.143405, -(float)0.491024, (float)0.0,
    (float)0.991353, (float)0.112814, (float)0.0670273, (float)0.0,
    (float)0.0337884, -(float)0.979891, -(float)0.196654, (float)0.0
#endregion
        };


        #endregion



        #region Interpolations
        /// <summary>
        /// Code from libnoise.
        /// 
        /// Performs cubic interpolation between two values bound between two other
        /// values.
        /// 
        /// The alpha value should range from (float)0.0 to 1.(float)0. If the alpha value is
        /// (float)0.0, this function returns n1.  If the alpha value is 1.0, this
        /// function returns n2.
        /// </summary>
        /// <param name="a">The alpha value.</param>
        /// <param name="n0">The value before the first value.</param>
        /// <param name="n1">The first value.</param>
        /// <param name="n2">The second value.</param>
        /// <param name="n3">The value after the second value.</param>
        /// <return>The interpolated value.</return>
        public float CubicInterp (float n0, float n1, float n2, float n3, float a)
        {
	        float p = (n3 - n2) - (n0 - n1);
	        float q = (n0 - n1) - p;
	        float r = n2 - n0;
	        float s = n1;
	        return p * a * a * a + q * a * a + r * a + s;
        }

        /// <summary>
        /// Code from libnoise.
        /// 
        /// Performs linear interpolation between two values.
        /// 
        /// The alpha value should range from (float)0.0 to 1.(float)0. If the alpha value is
        /// (float)0.0, this function returns n1.  If the alpha value is 1.0, this
        /// function returns n2.
        /// </summary>
        /// <param name="a">The alpha value.</param>
        /// <param name="n0">The value before the first value.</param>
        /// <param name="n1">The first value.</param>
        /// <return>The interpolated value.</return>
        public float LinearInterp(float n0, float n1, float a)
        {
            return ((1.0f - a) * n0) + (a * n1);
        }


        /// <summary>
        /// Code from libnoise.
        /// 
        /// Maps a value onto a cubic S-curve.
        /// The derivitive of a cubic S-curve is zero at a = (float)0.0 and a =
        /// 1.0
        /// </summary>
        /// <param name="a">The value to map onto a cubic S-curve.</param>
        /// <return>The mapped value.</return>
        public float SCurve3(float a)
        {
            return (a * a * (3.0f - 2.0f * a));
        }

        /// <summary>
        /// Code from libnoise.
        /// 
        /// Maps a value onto a quintic S-curve.
        /// 
        /// The first derivitive of a quintic S-curve is zero at a = (float)0.0 and
        /// a = 1.0
        ///
        /// The second derivitive of a quintic S-curve is zero at a = (float)0.0 and
        /// a = 1.0
        /// </summary>
        /// <param name="a">The value to map onto a quintic S-curve.</param>
        /// <return>The mapped value.</return>
        public float SCurve5(float a)
        {
            float a3 = a * a * a;
            float a4 = a3 * a;
            float a5 = a4 * a;
            return (6.0f * a5) - (15.0f * a4) + (10.0f * a3);
        }


        #endregion


        protected float MakeInt32Range(float value)
        {
            return value % Int32.MaxValue;
        }

        #region Noises
        // Constants from libnoise.
        public const int X_NOISE_GEN = 1619;
        public const int Y_NOISE_GEN = 31337;
        public const int Z_NOISE_GEN = 6971;
        public const int SEED_NOISE_GEN = 1013;
        public const int SHIFT_NOISE_GEN = 8;

        /// <summary>
        /// Code original : libnoise.
        /// Portage vers C# et réduction à deux dimensions par l'équipe du projet.
        /// </summary>
        public float GradientCoherentNoise2D(float x, float y, int seed,
            NoiseQuality noiseQuality)
        {
            // Create a unit-length cube aligned along an integer boundary.  This cube
            // surrounds the input point.
            int x0 = (x > (float)0.0 ? (int)x : (int)x - 1);
            int x1 = x0 + 1;
            int y0 = (y > (float)0.0 ? (int)y : (int)y - 1);
            int y1 = y0 + 1;

            // Map the difference between the coordinates of the input value and the
            // coordinates of the cube's outer-lower-left vertex onto an S-curve.
            float xs = 0, ys = 0;
            switch (noiseQuality)
            {
                case NoiseQuality.QUALITY_FAST:
                    xs = (x - (float)x0);
                    ys = (y - (float)y0);
                    break;
                case NoiseQuality.QUALITY_STD:
                    xs = SCurve3(x - (float)x0);
                    ys = SCurve3(y - (float)y0);
                    break;
                case NoiseQuality.QUALITY_BEST:
                    xs = SCurve5(x - (float)x0);
                    ys = SCurve5(y - (float)y0);
                    break;
            }

            // Now calculate the noise values at each vertex of the square.  To generate
            // the coherent-noise value at the input point, interpolate these eight
            // noise values using the S-curve value as the interpolant (trilinear
            // interpolation.)
            float n0, n1, ix0, ix1, iy0;
            n0 = GradientNoise2D(x, y, x0, y0, seed);
            n1 = GradientNoise2D(x, y, x1, y0, seed);
            ix0 = LinearInterp(n0, n1, xs);
            n0 = GradientNoise2D(x, y, x0, y1, seed);
            n1 = GradientNoise2D(x, y, x1, y1, seed);
            ix1 = LinearInterp(n0, n1, xs);
            iy0 = LinearInterp(ix0, ix1, ys);
            return iy0;
        }

        /// <summary>
        /// Code original : libnoise.
        /// Portage vers C# et réduction à deux dimensions par l'équipe du projet.
        /// </summary>
        public float GradientNoise2D(float fx, float fy, int ix,
            int iy, int seed)
        {
            // Randomly generate a gradient vector given the integer coordinates of the
            // input value.  This implementation generates a random number and uses it
            // as an index into a normalized-vector lookup table.
            long vectorIndex = (
                                X_NOISE_GEN * ix
                            + Y_NOISE_GEN * iy
                            + SEED_NOISE_GEN * seed)
                            & 0xffffffff;
            vectorIndex ^= (vectorIndex >> SHIFT_NOISE_GEN);
            vectorIndex &= 0xff;

            float xvGradient = s_randomVectors[(vectorIndex << 2)];
            float yvGradient = s_randomVectors[(vectorIndex << 2) + 1];

            // Set up us another vector equal to the distance between the two vectors
            // passed to this function.
            float xvPoint = (fx - (float)ix);
            float yvPoint = (fy - (float)iy);

            // Now compute the dot product of the gradient vector with the distance
            // vector.  The resulting value is gradient noise.  Apply a scaling value
            // so that this noise value ranges from -1.0 to 1.(float)0.
            return ((xvGradient * xvPoint)
            + (yvGradient * yvPoint)) * 1.431f;
        }

        public float GradientCoherentNoise3D(float x, float y, float z, int seed,
                        NoiseQuality noiseQuality)
        {
            // Create a unit-length cube aligned along an integer boundary.  This cube
            // surrounds the input point.
            int x0 = (x > 0.0 ? (int)x : (int)x - 1);
            int x1 = x0 + 1;
            int y0 = (y > 0.0 ? (int)y : (int)y - 1);
            int y1 = y0 + 1;
            int z0 = (z > 0.0 ? (int)z : (int)z - 1);
            int z1 = z0 + 1;

            // Map the difference between the coordinates of the input value and the
            // coordinates of the cube's outer-lower-left vertex onto an S-curve.
            float xs = 0, ys = 0, zs = 0;
            switch (noiseQuality)
            {
                case NoiseQuality.QUALITY_FAST:
                    xs = (x - (float)x0);
                    ys = (y - (float)y0);
                    zs = (z - (float)z0);
                    break;
                case NoiseQuality.QUALITY_STD:
                    xs = SCurve3(x - (float)x0);
                    ys = SCurve3(y - (float)y0);
                    zs = SCurve3(z - (float)z0);
                    break;
                case NoiseQuality.QUALITY_BEST:
                    xs = SCurve5(x - (float)x0);
                    ys = SCurve5(y - (float)y0);
                    zs = SCurve5(z - (float)z0);
                    break;
            }

            // Now calculate the noise values at each vertex of the cube.  To generate
            // the coherent-noise value at the input point, interpolate these eight
            // noise values using the S-curve value as the interpolant (trilinear
            // interpolation.)
            float n0, n1, ix0, ix1, iy0, iy1;
            n0 = GradientNoise3D(x, y, z, x0, y0, z0, seed);
            n1 = GradientNoise3D(x, y, z, x1, y0, z0, seed);
            ix0 = LinearInterp(n0, n1, xs);
            n0 = GradientNoise3D(x, y, z, x0, y1, z0, seed);
            n1 = GradientNoise3D(x, y, z, x1, y1, z0, seed);
            ix1 = LinearInterp(n0, n1, xs);
            iy0 = LinearInterp(ix0, ix1, ys);
            n0 = GradientNoise3D(x, y, z, x0, y0, z1, seed);
            n1 = GradientNoise3D(x, y, z, x1, y0, z1, seed);
            ix0 = LinearInterp(n0, n1, xs);
            n0 = GradientNoise3D(x, y, z, x0, y1, z1, seed);
            n1 = GradientNoise3D(x, y, z, x1, y1, z1, seed);
            ix1 = LinearInterp(n0, n1, xs);
            iy1 = LinearInterp(ix0, ix1, ys);

            return LinearInterp(iy0, iy1, zs);
        }

        public float GradientNoise3D(float fx, float fy, float fz, int ix,
            int iy, int iz, int seed)
        {
            // Randomly generate a gradient vector given the integer coordinates of the
            // input value.  This implementation generates a random number and uses it
            // as an index into a normalized-vector lookup table.
            long vectorIndex = (
                                X_NOISE_GEN * ix
                            + Y_NOISE_GEN * iy
                            + Z_NOISE_GEN * iz
                            + SEED_NOISE_GEN * seed)
                            & 0xffffffff;
            vectorIndex ^= (vectorIndex >> SHIFT_NOISE_GEN);
            vectorIndex &= 0xff;

            float xvGradient = s_randomVectors[(vectorIndex << 2)];
            float yvGradient = s_randomVectors[(vectorIndex << 2) + 1];
            float zvGradient = s_randomVectors[(vectorIndex << 2) + 2];

            // Set up us another vector equal to the distance between the two vectors
            // passed to this function.
            float xvPoint = (fx - (float)ix);
            float yvPoint = (fy - (float)iy);
            float zvPoint = (fz - (float)iz);

            // Now compute the dot product of the gradient vector with the distance
            // vector.  The resulting value is gradient noise.  Apply a scaling value
            // so that this noise value ranges from -1.0 to 1.0.
            return ((xvGradient * xvPoint)
            + (yvGradient * yvPoint)
            + (zvGradient * zvPoint)) * 2.12f;
        }

        /// <summary>
        /// Code original : libnoise.
        /// Portage vers C# par l'équipe du projet.
        /// </summary>
        public int IntValueNoise3D(int x, int y, int z, int seed)
        {
            // All constants are primes and must remain prime in order for this noise
            // function to work correctly.
            int n = (
                X_NOISE_GEN * x
            + Y_NOISE_GEN * y
            + Z_NOISE_GEN * z
            + SEED_NOISE_GEN * seed)
            & 0x7fffffff;
            n = (n >> 13) ^ n;
            return (n * (n * n * 60493 + 19990303) + 1376312589) & 0x7fffffff;
        }

        /// <summary>
        /// Code original : libnoise.
        /// Portage vers C# par l'équipe du projet.
        /// </summary>
        public float ValueCoherentNoise3D(float x, float y, float z, int seed,
            NoiseQuality noiseQuality)
        {
            // Create a unit-length cube aligned along an integer boundary.  This cube
            // surrounds the input point.
            int x0 = (x > (float)0.0 ? (int)x : (int)x - 1);
            int x1 = x0 + 1;
            int y0 = (y > (float)0.0 ? (int)y : (int)y - 1);
            int y1 = y0 + 1;
            int z0 = (z > (float)0.0 ? (int)z : (int)z - 1);
            int z1 = z0 + 1;

            // Map the difference between the coordinates of the input value and the
            // coordinates of the cube's outer-lower-left vertex onto an S-curve.
            float xs = 0, ys = 0, zs = 0;
            switch (noiseQuality)
            {
                case NoiseQuality.QUALITY_FAST:
                    xs = (x - (float)x0);
                    ys = (y - (float)y0);
                    zs = (z - (float)z0);
                    break;
                case NoiseQuality.QUALITY_STD:
                    xs = SCurve3(x - (float)x0);
                    ys = SCurve3(y - (float)y0);
                    zs = SCurve3(z - (float)z0);
                    break;
                case NoiseQuality.QUALITY_BEST:
                    xs = SCurve5(x - (float)x0);
                    ys = SCurve5(y - (float)y0);
                    zs = SCurve5(z - (float)z0);
                    break;
            }

            // Now calculate the noise values at each vertex of the cube.  To generate
            // the coherent-noise value at the input point, interpolate these eight
            // noise values using the S-curve value as the interpolant (trilinear
            // interpolation.)
            float n0, n1, ix0, ix1, iy0, iy1;
            n0 = ValueNoise3D(x0, y0, z0, seed);
            n1 = ValueNoise3D(x1, y0, z0, seed);
            ix0 = LinearInterp(n0, n1, xs);
            n0 = ValueNoise3D(x0, y1, z0, seed);
            n1 = ValueNoise3D(x1, y1, z0, seed);
            ix1 = LinearInterp(n0, n1, xs);
            iy0 = LinearInterp(ix0, ix1, ys);
            n0 = ValueNoise3D(x0, y0, z1, seed);
            n1 = ValueNoise3D(x1, y0, z1, seed);
            ix0 = LinearInterp(n0, n1, xs);
            n0 = ValueNoise3D(x0, y1, z1, seed);
            n1 = ValueNoise3D(x1, y1, z1, seed);
            ix1 = LinearInterp(n0, n1, xs);
            iy1 = LinearInterp(ix0, ix1, ys);
            return LinearInterp(iy0, iy1, zs);
        }

        /// <summary>
        /// Code original : libnoise.
        /// Portage vers C# par l'équipe du projet.
        /// </summary>
        public  float ValueNoise3D(int x, int y, int z, int seed=0)
        {
            return 1.0f - ((float)IntValueNoise3D(x, y, z, seed) / 1073741824.0f);
        }

        #endregion

        /// <summary>
        /// Obtient la valeur du bruit aux coordonnées indiquées.
        /// </summary>
        public virtual float GetValue(float x, float y, float z)
        {
            throw new NotImplementedException();
        }
        #endregion
    }
        
}
    
